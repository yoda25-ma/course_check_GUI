#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.1.0pre on Sun Apr 25 17:36:28 2021
#

import wx
import pandas as pd
import os
import openpyxl
import glob
import itertools

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1103, 300))
        self.SetTitle("frame")
        self.SetBackgroundColour(wx.Colour(216, 216, 191))
        self.SetForegroundColour(wx.Colour(0, 0, 0))
        self.SetFont(wx.Font(9, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 0, wx.ALL | wx.EXPAND, 30)

        label_3 = wx.StaticText(self, wx.ID_ANY, u"入力エクセル  ")
        sizer_5.Add(label_3, 0, 0, 0)

        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_5.Add(self.text_ctrl_2, 3, 0, 0)

        self.button_1 = wx.Button(self, wx.ID_ANY, u"読み込み")
        sizer_5.Add(self.button_1, 0, 0, 0)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_6, 2, wx.ALL | wx.EXPAND, 28)

        label_4 = wx.StaticText(self, wx.ID_ANY, u"入力グリッドフォルダ  ")
        sizer_6.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_ctrl_1.SetMinSize((800, 23))
        sizer_6.Add(self.text_ctrl_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.button_2 = wx.Button(self, wx.ID_ANY, u"読み込み")
        sizer_6.Add(self.button_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_8, 1, wx.EXPAND, 0)

        sizer_8.Add((850, 20), 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)

        self.button_5 = wx.Button(self, wx.ID_ANY, u"帳票作成")
        self.button_5.SetMinSize((100, 50))
        self.button_5.SetMaxSize((3, 3))
        sizer_8.Add(self.button_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)

        self.button_6 = wx.Button(self, wx.ID_ANY, u"テキスト出力")
        self.button_6.SetMinSize((100, 50))
        sizer_8.Add(self.button_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.SetSizer(sizer_4)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.OnChooseTargetExOrigin, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnChooseTargetGrids, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnExec, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.OnExportTxt, self.button_6)
        # end wxGlade

    def showFilesDialog(self):
        with wx.FileDialog(self, u'対象のファイル選択してください', style=wx.FD_OPEN | wx.FD_MULTIPLE) as dialog:
            # ファイルが選択されたとき
            if dialog.ShowModal() == wx.ID_OK:
                # 選択したファイルパスを取得する
                return dialog.GetPaths()

    def showFileDialog(self):
        with wx.FileDialog(self, u'対象のファイル選択してください', style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as dialog:
            # ファイルが選択されたとき
            if dialog.ShowModal() == wx.ID_OK:
                # 選択したファイルパスを取得する
                return dialog.GetPath()

    def showDirDialog(self):
        with wx.DirDialog(self, 'フォルダを選択してください',
                          style=wx.DD_DEFAULT_STYLE
                                | wx.DD_DIR_MUST_EXIST
                                | wx.DD_CHANGE_DIR
                          ) as dialog:
            if dialog.ShowModal() == wx.ID_CANCEL:
                return
            return dialog.GetPath()

    def OnAbout_ecd(self, event):
        # OK ボタンがついたメッセージダイアログを表示する。
        dlg = wx.MessageDialog(self, "処理が終了しました", "結果", wx.OK)
        # ダイアログの表示
        dlg.ShowModal()
        # ダイアログの終了時にダイアログオブジェクトを破棄する
        dlg.Destroy()

    def OnChooseTargetExOrigin(self, event):  # wxGlade: MyFrame.<event_handler>
        pathname_ex = self.showFileDialog()
        self.text_ctrl_2.SetValue(pathname_ex)

    def OnChooseTargetGrids(self, event):  # wxGlade: MyFrame.<event_handler>
        pathname_dir = self.showDirDialog()
        self.text_ctrl_1.SetValue(pathname_dir)
        # self.text_ctrl_3.SetValue(pathname_grids)

    def OnExec(self, event):  # wxGlade: MyFrame.<event_handler>
        ex_path = self.text_ctrl_2.GetValue()
        conbi = []
        # files = self.text_ctrl_3.GetValue()
        os.chdir(self.text_ctrl_1.GetValue())
        files = glob.glob("*.xyz")
        for x in itertools.combinations(files, 2):
            conbi.append(x)

        def course_check(file_1, file_2):
            # excelの読み込み("file名")wbはworkbookのオブジェクト
            wb = openpyxl.load_workbook(ex_path)
            ws = wb.copy_worksheet(wb['様式8'])
            file1 = os.path.basename(file_1)
            file2 = os.path.basename(file_2)
            num1 = file1.rstrip(".xyz").lstrip("line")
            num2 = file2.rstrip(".xyz").lstrip("line")

            df1 = pd.read_table(file_1, names=['x', 'y', 'z1'], delim_whitespace=True)

            df2 = pd.read_table(file_2, names=['x', 'y', 'z2'], delim_whitespace=True)
            # print(df1)
            df = df1.merge(df2, on=['x', 'y'])
            df['dif'] = df['z2'] - df['z1']
            # print(df)

            df_result = df.query('-0.1 < = dif < = 0.1')

            df_result = df_result.sort_values(['x', 'y'])
            a = df_result.head(20)
            b = df_result.tail(20)
            print(a)
            print(b)
            sheets = wb.sheetnames
            sheet_num = sheets.index(ws.title)
            ws.title = num1 + "-" + num2

            ws['R8'] = 'C' + num1
            ws['X8'] = 'C' + num2
            if sheet_num == 1:
                ws['B9'] = str(sheet_num)
                ws['B11'] = str(sheet_num + 1)
            else:
                ws['B9'] = str(sheet_num * 2 - 1)
                ws['B11'] = str(sheet_num * 2)
            ws['L9'] = a.iloc[7][1]
            ws['F9'] = a.iloc[7][0]
            ws['R9'] = a.iloc[7][2]
            ws['x9'] = a.iloc[7][3]
            ws['ad9'] = a.iloc[7][4]
            ws['F11'] = b.iloc[12][0]
            ws['L11'] = b.iloc[12][1]
            ws['R11'] = b.iloc[12][2]
            ws['x11'] = b.iloc[12][3]
            ws['ad11'] = b.iloc[12][4]

            wb.save(ex_path)
            return

        if __name__ == '__main__':
            for i in conbi:
                text = str(i)
                text = text.replace('(', '')
                text = text.replace("'", '')
                text = text.replace(')', '')
                text = text.replace(' ', '')
                print(text)
                lst = []
                lst = text.split(',')
                file1 = str(lst[0])
                file2 = str(lst[1])
                print(lst)
                try:
                    course_check(file1, file2)
                except IndexError:
                    pass
        dlg = wx.MessageDialog(self, '処理が正常に終了しました。',
                               '完了',
                               wx.OK | wx.ICON_INFORMATION
                               )
        dlg.ShowModal()
        dlg.Destroy()

    def OnExportTxt(self, event):  # wxGlade: MyFrame.<event_handler>
        ex_path = self.text_ctrl_2.GetValue()
        wb = openpyxl.load_workbook(ex_path)
        sheets0 = wb.sheetnames
        if '様式8' in sheets0:
            wb.remove(wb['様式8'])
        else:
            pass
        sheets = wb.sheetnames
        num = []
        y = []
        x = []
        z = []

        for i in sheets:
            ws = wb[i]
            num.append(ws['B9'].value)
            y.append(ws['F9'].value)
            x.append(ws['L9'].value)
            z.append(0)
            num.append(ws['B11'].value)
            y.append(ws['F11'].value)
            x.append(ws['L11'].value)
            z.append(0)

        print(num)
        df = pd.DataFrame({'num': num, 'x': x, 'y': y, 'z': z})
        print(df)
        df.to_csv("cp_n.csv", index=False, header=False)
        wb.save(ex_path)
        dlg = wx.MessageDialog(self, 'テキストを出力しました。',
                               '完了',
                               wx.OK | wx.ICON_INFORMATION
                               )
        dlg.ShowModal()
        dlg.Destroy()


# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
